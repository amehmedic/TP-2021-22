{
    "id": 0,
    "name": "Tehnike programiranja (2020\/2021), Zada\u0107a 5, Zadatak 6",
    "languages": [
        "C++"
    ],
    "tools": {
        "compile": {
            "require": "g++",
            "features": [
                "optimize",
                "warn",
                "pedantic",
                "C++14"
            ]
        },
        "compile[debug]": {
            "require": "g++",
            "features": [
                "debug",
                "C++14"
            ]
        },
        "execute": {
            "environment": {
                "timeout": 10,
                "memory": 1000000
            }
        },
        "debug": [],
        "profile[memcheck]": {
            "require": "valgrind",
            "features": [
                "memcheck"
            ],
            "environment": {
                "timeout": 10
            }
        },
        "profile[sgcheck]": {
            "require": "valgrind",
            "features": [
                "sgcheck"
            ],
            "environment": {
                "timeout": 10
            }
        }
    },
    "tests": [
        {
            "id": 1,
            "name": "Test 1",
            "options": [
                "silent",
                "terminate"
            ],
            "compile": []
        },
        {
            "id": 2,
            "name": "Test 2",
            "patch": [
                {
                    "position": "main",
                    "code": "\/\/AT 1: Sortiranje, x > y\n\/\/ Za sva pitanja vezana za zadatak 6, obratite se na mail: hcapelj1@etf.unsa.ba\n\/\/ne zaboravite ukljuciti <functional>, mora biti po postavci (less)\n\nstd::ofstream fo (\"dat.bin\", std::ios::binary);\nfor (long long int i = 5; i <= 40; ++i)\n    fo.write ((char *)&i, sizeof i);\nfo.close();\nSortirajBinarnuDatoteku<long long int> (\"dat.bin\", std::greater<long long int>());\nstd::ifstream fi (\"dat.bin\", std::ios::binary);\nlong long int p = -1;\nwhile (fi.read ((char *)&p, sizeof p)) std::cout << p << \" \";"
                }
            ],
            "compile": [],
            "compile[debug]": [],
            "execute": {
                "expect": [
                    "40 39 38 37 36 35 34 33 32 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5\t"
                ]
            },
            "debug": [],
            "profile[memcheck]": [],
            "profile[sgcheck]": []
        },
        {
            "id": 3,
            "name": "Test 3",
            "patch": [
                {
                    "position": "main",
                    "code": "\/\/AT 2: Podrazumijevani parametar (std::less)\n\nstd::ofstream fo (\"dat.bin\", std::ios::binary);\nfor (long long int i = 151; i > 81; i -= 2)\n    fo.write ((char *)&i, sizeof i);\nfo.close();\nSortirajBinarnuDatoteku<long long int> (\"dat.bin\");\nstd::ifstream fi (\"dat.bin\", std::ios::binary);\nlong long int p = -1;\nwhile (fi.read ((char *)&p, sizeof p)) std::cout << p << \" \";"
                }
            ],
            "compile": [],
            "compile[debug]": [],
            "execute": {
                "expect": [
                    "83 85 87 89 91 93 95 97 99 101 103 105 107 109 111 113 115 117 119 121 123 125 127 129 131 133 135 137 139 141 143 145 147 149 151\t"
                ]
            },
            "debug": [],
            "profile[memcheck]": [],
            "profile[sgcheck]": []
        },
        {
            "id": 4,
            "name": "Test 4",
            "patch": [
                {
                    "position": "main",
                    "code": "\t\n{\/\/AT 3: Funkcija sortira na osnovu sume cifara\n\nstd::ofstream fo (\"dat.bin\", std::ios::binary);\nshort niz[] = {4, 3, 5, 34, 1, 45, 54, 22, 1, 234, 43, 234, 532, 12, 100, 101};\nsize_t vel = sizeof niz \/ sizeof *niz;\nfor (size_t i = 0; i < vel; ++i)\n    fo.write ((char *)&niz[i], sizeof niz[i]);\nfo.close();\nauto suma = [](short x) {int s = 0; while (x) s += x % 10, x \/= 10; return s;};\nauto lambda = [suma](short a, short b) {if (suma(a) == suma(b)) return a < b; return suma (a) < suma (b);};\nSortirajBinarnuDatoteku<short> (\"dat.bin\", lambda);\nstd::ifstream fi (\"dat.bin\", std::ios::binary);\nshort p = -1;\nwhile (fi.read ((char *)&p, sizeof p)) std::cout << p << \" \"; \n}"
                }
            ],
            "compile": [],
            "compile[debug]": [],
            "execute": {
                "expect": [
                    "1 1 100 101 3 12 4 22 5 34 43 45 54 234 234 532\t"
                ]
            },
            "debug": [],
            "profile[memcheck]": [],
            "profile[sgcheck]": []
        },
        {
            "id": 5,
            "name": "Test 5",
            "patch": [
                {
                    "position": "main",
                    "code": "{\/\/AT 4: Funkcija sortira na osnovu broja cifri - funktor\n\nstd::ofstream fo (\"dat.bin\", std::ios::binary);\nshort niz[] = {4, 3, 5, 34, 1, 45, 54, 0, 22, 2, 204, 413, 2341, 5302, 12, 100, 101};\nsize_t vel = sizeof niz \/ sizeof *niz;\nfor (size_t i = 0; i < vel; ++i)\n    fo.write ((char *)&niz[i], sizeof niz[i]);\nfo.close();\nstruct Funktor \n{\n    static short suma (short x) {int s = 0; while (x) s += x % 10, x \/= 10; return s;};\n    bool operator ()(short a, short b) const {return suma(a) != suma(b) ? suma (a) < suma (b) : a < b;}\n};\nSortirajBinarnuDatoteku<short> (\"dat.bin\", Funktor());\nstd::ifstream fi (\"dat.bin\", std::ios::binary);\nshort p = -1;\nwhile (fi.read ((char *)&p, sizeof p)) std::cout << p << \" \";\n}"
                }
            ],
            "compile": [],
            "compile[debug]": [],
            "execute": {
                "expect": [
                    "0 1 100 2 101 3 12 4 22 5 204 34 413 45 54 2341 5302\t"
                ]
            },
            "debug": [],
            "profile[memcheck]": [],
            "profile[sgcheck]": []
        },
        {
            "id": 6,
            "name": "Test 6",
            "patch": [
                {
                    "position": "main",
                    "code": "\t\n    {\/\/AT 5: Vec sortirano\n       std::ofstream fo (\"dat.bin\", std::ios::binary);\n        for (long long int i = 151; i > 81; i -= 3)\n            fo.write ((char *)&i, sizeof i);\n        fo.close();\n        SortirajBinarnuDatoteku<long long int> (\"dat.bin\", std::greater<long long>());\n        std::ifstream fi (\"dat.bin\", std::ios::binary);\n        long long int p = -1;\n        while (fi.read ((char *)&p, sizeof p)) std::cout << p << \" \"; \n    }"
                }
            ],
            "compile": [],
            "compile[debug]": [],
            "execute": {
                "expect": [
                    "151 148 145 142 139 136 133 130 127 124 121 118 115 112 109 106 103 100 97 94 91 88 85 82\t"
                ]
            },
            "debug": [],
            "profile[memcheck]": [],
            "profile[sgcheck]": []
        },
        {
            "id": 7,
            "name": "Test 7",
            "patch": [
                {
                    "position": "main",
                    "code": " {\/\/AT 6: Ne postoji datoteka\n        try {SortirajBinarnuDatoteku<int> (\"ne-postoji.bat\"); std::cout << \"Izuzetak nije bacen!\" << std::endl;}\n        catch (const std::logic_error &c) {std::cout << \"OK: \" << c.what() << std::endl;}\n        catch (...) {std::cout << \"Pogresan tip izuzetka!\" << std::endl;}\n    }"
                }
            ],
            "compile": [],
            "compile[debug]": [],
            "execute": {
                "expect": [
                    "OK: Datoteka ne postoji\t"
                ]
            },
            "debug": [],
            "profile[memcheck]": [],
            "profile[sgcheck]": []
        },
        {
            "id": 8,
            "name": "Test 8",
            "patch": [
                {
                    "position": "main",
                    "code": "\t\n{\/\/AT 7: Sortiranje, svi ostaju u istom redoslijedu\n\nstd::ofstream fo (\"dat.bin\", std::ios::binary);\nshort niz[] = {4, 3, 5, 34, 1, 45, 54, 0, 22, 2, 204, 413, 2341, 5302, 12, 100, 101};\nsize_t vel = sizeof niz \/ sizeof *niz;\nfor (size_t i = 0; i < vel; ++i)\n    fo.write ((char *)&niz[i], sizeof niz[i]);\nfo.close();\n\nSortirajBinarnuDatoteku<short> (\"dat.bin\", [](short, short) {return true;});\nstd::ifstream fi (\"dat.bin\", std::ios::binary);\nshort p = -1;\nwhile (fi.read ((char *)&p, sizeof p)) std::cout << p << \" \";\n}"
                }
            ],
            "compile": [],
            "compile[debug]": [],
            "execute": {
                "expect": [
                    "4 3 5 34 1 45 54 0 22 2 204 413 2341 5302 12 100 101\t"
                ]
            },
            "debug": [],
            "profile[memcheck]": [],
            "profile[sgcheck]": []
        },
        {
            "id": 9,
            "name": "Test 9",
            "patch": [
                {
                    "position": "main",
                    "code": "{\/\/AT 8: Sortiranje, *zanimljivo*, obrce redoslijed datoteke, kakva god da je\n\nstd::ofstream fo (\"dat.bin\", std::ios::binary);\nshort niz[] = {4, 3, 5, 34, 1, 45, 54, 0, 22, 2, 204, 413, 2341, 5302, 12, 100, 101};\nsize_t vel = sizeof niz \/ sizeof *niz;\nfor (size_t i = 0; i < vel; ++i)\n    fo.write ((char *)&niz[i], sizeof niz[i]);\nfo.close();\n\n\/\/ako kriterij vrati false, to znaci da elemente treba mijenjati...\nSortirajBinarnuDatoteku<short> (\"dat.bin\", [](short, short) {return false;});\nstd::ifstream fi (\"dat.bin\", std::ios::binary);\nshort p = -1;\nwhile (fi.read ((char *)&p, sizeof p)) std::cout << p << \" \";\n}"
                }
            ],
            "compile": [],
            "compile[debug]": [],
            "execute": {
                "expect": [
                    "101 100 12 5302 2341 413 204 2 22 0 54 45 1 34 5 3 4\t"
                ]
            },
            "debug": [],
            "profile[memcheck]": [],
            "profile[sgcheck]": []
        },
        {
            "id": 10,
            "name": "Test 10",
            "patch": [
                {
                    "position": "main",
                    "code": "{\/\/AT 9: Jedan elemenat\nstd::ofstream fo (\"dat.bin\", std::ios::binary);\nint el = 77777;\nfo.write ((char *)&el, sizeof el);\nfo.close();\nSortirajBinarnuDatoteku<int> (\"dat.bin\");\nstd::ifstream fi (\"dat.bin\", std::ios::binary);\nint p = -1;\nwhile (fi.read ((char *)&p, sizeof p)) std::cout << p << \" \";\n}"
                }
            ],
            "compile": [],
            "compile[debug]": [],
            "execute": {
                "expect": [
                    "77777\t"
                ]
            },
            "debug": [],
            "profile[memcheck]": [],
            "profile[sgcheck]": []
        },
        {
            "id": 11,
            "name": "Test 11",
            "patch": [
                {
                    "position": "main",
                    "code": "{\/\/AT 10: Prazna datoteka nije neispravna!\n    std::ofstream fo (\"dat.bin\", std::ios::binary);    \n    SortirajBinarnuDatoteku<float> (\"dat.bin\");\n    float p = -1;\n    std::ifstream fi (\"dat.bin\", std::ios::binary);\n    while (fi.read ((char *)&p, sizeof p)) std::cout << p << \" \";\n    std::cout << \"OK\";\n}"
                }
            ],
            "compile": [],
            "compile[debug]": [],
            "execute": {
                "expect": [
                    "OK"
                ]
            },
            "debug": [],
            "profile[memcheck]": [],
            "profile[sgcheck]": []
        },
        {
            "id": 12,
            "name": "Test 12",
            "patch": [
                {
                    "position": "main",
                    "code": "{\/\/AT 11: Sortira malo vecu datoteku\nstd::ofstream fo (\"ban-all.eon\", std::ios::binary);\nfor (long double i = 1; i <= 250; i += 1)\n    fo.write ((char *)&i, sizeof i);\nfo.close();\ntry {SortirajBinarnuDatoteku<long double> (\"ban-all.eon\", std::greater<long double>());}\ncatch (...) {std::cout << \"izuzetak!\\n\";}\nstd::ifstream fi (\"ban-all.eon\", std::ios::binary);\nbool prvi = true, sortiran = true;\nlong double a, b, p;\nwhile (fi.read ((char *)&p, sizeof p))\n{\n    if (prvi) {prvi = false; a = p; continue;}\n    b = p;\n    if (!(a > b)) {sortiran = false; break;}\n    a = b;\n}\nstd::cout << \"Datoteka \" << (sortiran ? \"je\" : \"NIJE\") << \" sortirana!\";\n}"
                }
            ],
            "compile": [],
            "compile[debug]": [],
            "execute": {
                "expect": [
                    "Datoteka je sortirana!\t"
                ]
            },
            "debug": [],
            "profile[memcheck]": [],
            "profile[sgcheck]": []
        },
        {
            "id": 13,
            "name": "Test 13",
            "patch": [
                {
                    "position": "main",
                    "code": "{\/\/AT 12: Imenovana funkcija\n\nstd::ofstream fo (\"dat.bin\", std::ios::binary);\nshort niz[] = {4, -3, 5, -34, -1, 45, 54, 0, 1, 22, 2, -204, 413, 2341, 5302, 12, 100, 101};\nsize_t vel = sizeof niz \/ sizeof *niz;\nfor (size_t i = 0; i < vel; ++i)\n    fo.write ((char *)&niz[i], sizeof niz[i]);\nfo.close();\n\nSortirajBinarnuDatoteku<short> (\"dat.bin\", absgreater);\nstd::ifstream fi (\"dat.bin\", std::ios::binary);\nshort p = -1;\nwhile (fi.read ((char *)&p, sizeof p)) std::cout << p << \" \";\n}"
                },
                {
                    "position": "top_of_file",
                    "code": "bool absgreater (int a, int b) {a = a < 0 ? -a : a; b = b < 0 ? -b : b; return a > b;}"
                }
            ],
            "compile": [],
            "compile[debug]": [],
            "execute": {
                "expect": [
                    "5302 2341 413 -204 101 100 54 45 -34 22 12 5 4 -3 2 1 -1 0\t"
                ]
            },
            "debug": [],
            "profile[memcheck]": [],
            "profile[sgcheck]": []
        }
    ]
}