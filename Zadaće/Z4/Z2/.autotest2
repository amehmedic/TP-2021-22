{
    "id": 0,
    "name": "Tehnike programiranja (2020\/2021), Zada\u0107a 4, Zadatak 2",
    "languages": [
        "C++"
    ],
    "tools": {
        "compile": {
            "require": "g++",
            "features": [
                "optimize",
                "warn",
                "pedantic",
                "C++14"
            ]
        },
        "compile[debug]": {
            "require": "g++",
            "features": [
                "debug",
                "C++14"
            ]
        },
        "execute": {
            "environment": {
                "timeout": 10,
                "memory": 1000000
            }
        },
        "debug": [],
        "profile[memcheck]": {
            "require": "valgrind",
            "features": [
                "memcheck"
            ],
            "environment": {
                "timeout": 10
            }
        },
        "profile[sgcheck]": {
            "require": "valgrind",
            "features": [
                "sgcheck"
            ],
            "environment": {
                "timeout": 10
            }
        }
    },
    "tests": [
        {
            "id": 1,
            "name": "Test 1",
            "options": [
                "silent",
                "terminate"
            ],
            "compile": []
        },
        {
            "id": 2,
            "name": "Test 2",
            "patch": [
                {
                    "position": "main",
                    "code": "\/\/AT (c9 - 4) (javni)\n\n_main();"
                }
            ],
            "compile": [],
            "compile[debug]": [],
            "execute": {
                "environment": {
                    "stdin": "2\n0 0 0\n-1\n-2\n2\n1 1 1\n0\n1 1 1\n1\n8 8 8\n2.1"
                },
                "expect": [
                    "Unesite broj kugli: Unesite centar za 1. kuglu: Unesite poluprecnik: Neispravan poluprecnik, unesite ponovo:\nNeispravan poluprecnik, unesite ponovo:\nUnesite centar za 2. kuglu: Unesite poluprecnik: Nedozvoljeno preklapanje\nUnesite centar za 2. kuglu: Unesite poluprecnik: Nedozvoljeno preklapanje\nUnesite centar za 2. kuglu: Unesite poluprecnik: \nKugle nakon obavljenog sortiranja: \n{(0,0,0),2}\n{(8,8,8),2.1}\t"
                ]
            },
            "debug": [],
            "profile[memcheck]": {
                "environment": {
                    "stdin": "2\n0 0 0\n-1\n-2\n2\n1 1 1\n0\n1 1 1\n1\n8 8 8\n2.1"
                }
            },
            "profile[sgcheck]": {
                "environment": {
                    "stdin": "2\n0 0 0\n-1\n-2\n2\n1 1 1\n0\n1 1 1\n1\n8 8 8\n2.1"
                }
            }
        },
        {
            "id": 3,
            "name": "Test 3",
            "patch": [
                {
                    "position": "main",
                    "code": "\/\/AT (c9 - 3) (javni)\n\n_main();"
                }
            ],
            "compile": [],
            "compile[debug]": [],
            "execute": {
                "environment": {
                    "stdin": "5\n0 0 d\n1 1 1\nd\n1\n5 6 8\n5\n17 20 31\n6\n30 30 30\n2\n123 -130 500\n30"
                },
                "expect": [
                    "Unesite broj kugli: Unesite centar za 1. kuglu: Neispravan centar, unesite ponovo:\nUnesite poluprecnik: Neispravan poluprecnik, unesite ponovo:\nUnesite centar za 2. kuglu: Unesite poluprecnik: Unesite centar za 3. kuglu: Unesite poluprecnik: Unesite centar za 4. kuglu: Unesite poluprecnik: Unesite centar za 5. kuglu: Unesite poluprecnik: \nKugle nakon obavljenog sortiranja: \n{(1,1,1),1}\n{(30,30,30),2}\n{(5,6,8),5}\n{(17,20,31),6}\n{(123,-130,500),30}"
                ]
            },
            "debug": [],
            "profile[memcheck]": {
                "environment": {
                    "stdin": "5\n0 0 d\n1 1 1\nd\n1\n5 6 8\n5\n17 20 31\n6\n30 30 30\n2\n123 -130 500\n30"
                }
            },
            "profile[sgcheck]": {
                "environment": {
                    "stdin": "5\n0 0 d\n1 1 1\nd\n1\n5 6 8\n5\n17 20 31\n6\n30 30 30\n2\n123 -130 500\n30"
                }
            }
        },
        {
            "id": 4,
            "name": "Test 4",
            "patch": [
                {
                    "position": "main",
                    "code": "\/\/AT (c9 - 2) (javni)\n\n_main();"
                }
            ],
            "compile": [],
            "compile[debug]": [],
            "execute": {
                "environment": {
                    "stdin": "0\n-1\n3\n0 0 0\n1\n0 0 2\n1\n0 0 3\n1\n0 0 10\n2"
                },
                "expect": [
                    "Unesite broj kugli: Neispravan broj kugli, unesite ponovo!\nNeispravan broj kugli, unesite ponovo!\nUnesite centar za 1. kuglu: Unesite poluprecnik: Unesite centar za 2. kuglu: Unesite poluprecnik: Nedozvoljeno preklapanje\nUnesite centar za 2. kuglu: Unesite poluprecnik: Unesite centar za 3. kuglu: Unesite poluprecnik: \nKugle nakon obavljenog sortiranja: \n{(0,0,0),1}\n{(0,0,3),1}\n{(0,0,10),2}\t"
                ]
            },
            "debug": [],
            "profile[memcheck]": {
                "environment": {
                    "stdin": "0\n-1\n3\n0 0 0\n1\n0 0 2\n1\n0 0 3\n1\n0 0 10\n2"
                }
            },
            "profile[sgcheck]": {
                "environment": {
                    "stdin": "0\n-1\n3\n0 0 0\n1\n0 0 2\n1\n0 0 3\n1\n0 0 10\n2"
                }
            }
        },
        {
            "id": 5,
            "name": "Test 5",
            "patch": [
                {
                    "position": "main",
                    "code": "\/\/AT (c9 - 1) (javni)\n_main();"
                }
            ],
            "compile": [],
            "compile[debug]": [],
            "execute": {
                "environment": {
                    "stdin": "3\n2 3 1\n5\n10 7 8\n2\n4 6 3\n7\n5 8 4\n1"
                },
                "expect": [
                    "Unesite broj kugli: Unesite centar za 1. kuglu: Unesite poluprecnik: Unesite centar za 2. kuglu: Unesite poluprecnik: Unesite centar za 3. kuglu: Unesite poluprecnik: Nedozvoljeno preklapanje\nUnesite centar za 3. kuglu: Unesite poluprecnik: \nKugle nakon obavljenog sortiranja: \n{(5,8,4),1}\n{(10,7,8),2}\n{(2,3,1),5}\t"
                ]
            },
            "debug": [],
            "profile[memcheck]": {
                "environment": {
                    "stdin": "3\n2 3 1\n5\n10 7 8\n2\n4 6 3\n7\n5 8 4\n1"
                }
            },
            "profile[sgcheck]": {
                "environment": {
                    "stdin": "3\n2 3 1\n5\n10 7 8\n2\n4 6 3\n7\n5 8 4\n1"
                }
            }
        },
        {
            "id": 6,
            "name": "Test 6",
            "patch": [
                {
                    "position": "main",
                    "code": "    \/\/AT - test konstruktora sa jednim parametrom\n    try {\n        std::cout << std::boolalpha << std::is_convertible<double, NepreklapajucaKugla>::value << std::endl;\n        NepreklapajucaKugla k;\n        k.Ispisi();\n        std::cout << std::endl;\n        try {\n            NepreklapajucaKugla k1(5);\n        }\n        catch(std::logic_error &ex){\n            std::cout << \"OK \" << ex.what() << std::endl;\n        }\n        NepreklapajucaKugla k2(-1);\n\n    }\n    catch(std::domain_error &ex){\n        std::cout << \"OK \" << ex.what();\n    }\n    catch(...){\n        std::cout << \"NOT OK\";\n    }"
                }
            ],
            "compile": [],
            "compile[debug]": [],
            "execute": {
                "expect": [
                    "false\n{(0,0,0),0}\nOK Nedozvoljeno preklapanje\nOK Ilegalan poluprecnik\t"
                ]
            },
            "debug": [],
            "profile[memcheck]": [],
            "profile[sgcheck]": []
        },
        {
            "id": 7,
            "name": "Test 7",
            "patch": [
                {
                    "position": "main",
                    "code": "    \/\/AT - Test konstruktora sa 4 parametra\n    try{\n        NepreklapajucaKugla k1(5,5,5,5);\n        k1.Ispisi();\n        std::cout << std::endl;\n        NepreklapajucaKugla k2 = {-5,-5,-5,2};\n        k2.Ispisi();\n        std::cout << std::endl;\n        NepreklapajucaKugla k3(-1,1,-1,-1);\n\n    }\n    catch(std::domain_error ex){\n        std::cout << \"OK \" << ex.what();\n    }\n    catch(...){\n        std::cout << \"NOT OK\";\n    }"
                }
            ],
            "compile": [],
            "compile[debug]": [],
            "execute": {
                "expect": [
                    "{(5,5,5),5}\n{(-5,-5,-5),2}\nOK Ilegalan poluprecnik\t"
                ]
            },
            "debug": [],
            "profile[memcheck]": [],
            "profile[sgcheck]": []
        },
        {
            "id": 8,
            "name": "Test 8",
            "patch": [
                {
                    "position": "main",
                    "code": "    \/\/AT - Test konstruktra sa tuple-om\n\n    try{\n        std::cout << std::boolalpha << pretvorba_tipa_vise_argumenata<NepreklapajucaKugla, std::tuple<double, double, double>, double>::value << std::endl;\n        NepreklapajucaKugla k1(std::make_tuple(5,5,5),5);\n        k1.Ispisi();\n        std::cout << std::endl;\n        NepreklapajucaKugla k2 = {-5,-5,-5,2};\n        k2.Ispisi();\n        std::cout << std::endl;\n        NepreklapajucaKugla k3(-1,1,-1,-1);\n\n    }\n    catch(std::domain_error ex){\n        std::cout << \"OK \" << ex.what();\n    }\n    catch(...){\n        std::cout << \"NOT OK\";\n    }"
                },
                {
                    "position": "above_main",
                    "code": "#include <type_traits>\n#include <iomanip>\n\ntemplate <typename To_, typename... From_>\nclass pretvorba_tipa_vise_argumenata {\nprivate:\n    template <typename To>\n    struct testKonstrukcije {\n        testKonstrukcije(To);\n    };\n\n    template <typename To, typename... From>\n    struct pomocna {};\n\n    template <typename To, typename... From>\n    static auto test(pomocna<To, From...>)\n    -> decltype(testKonstrukcije<To>({std::declval<From>()...}), std::true_type());\n    static auto test(...)\n    -> std::false_type;\n\npublic:\n    static constexpr bool value = decltype(test(pomocna<To_, From_...>()))::value;\n};"
                }
            ],
            "compile": [],
            "compile[debug]": [],
            "execute": {
                "expect": [
                    "false\n{(5,5,5),5}\n{(-5,-5,-5),2}\nOK Ilegalan poluprecnik"
                ]
            },
            "debug": [],
            "profile[memcheck]": [],
            "profile[sgcheck]": []
        },
        {
            "id": 9,
            "name": "Test 9",
            "patch": [
                {
                    "position": "main",
                    "code": "    \/\/AT - Test metoda DajX, DajY, DajZ i DajCentar\n    \n    try{\n        const NepreklapajucaKugla k(std::make_tuple(1,2,3), 2.3);\n        std:: cout << std::fixed << std::setprecision(3);\n        std::cout << \"Centar: \" << k.DajX() << \" \" << k.DajY() << \" \"<< k.DajZ();\n        std::cout << \"\\nPoluprecnik: \" << k.DajPoluprecnik();\n        NepreklapajucaKugla k1(4,3,10,1);\n        std::tuple<double, double, double> centar(k1.DajCentar());\n        std::cout << \"\\nNovi centar: \" <<std::get<0>(centar) << \" \" << std::get<1>(centar) << \" \" << std::get<2>(centar);\n\n    }\n    catch(...) {\n        std::cout << \"IZUZETAK\";\n    }"
                }
            ],
            "compile": [],
            "compile[debug]": [],
            "execute": {
                "expect": [
                    "Centar: 1.000 2.000 3.000\nPoluprecnik: 2.300\nNovi centar: 4.000 3.000 10.000\t"
                ]
            },
            "debug": [],
            "profile[memcheck]": [],
            "profile[sgcheck]": []
        },
        {
            "id": 10,
            "name": "Test 10",
            "patch": [
                {
                    "position": "main",
                    "code": "   \/\/AT - Test metoda DajPovrsinu,  DajZapreminu i Ispisi i RastojanjeCentara\n    \n    try{\n        const NepreklapajucaKugla k(std::make_tuple(8,16,32), 30.3);\n        const NepreklapajucaKugla k1(std::make_tuple(-80,-100,30.3), 18.01);\n        std::cout << std::fixed << std::setprecision(5);\n        std::cout << \"Povrsina kugle k: \" << k.DajPovrsinu()\n                  << \"\\nZapremina kugle k : \" << k.DajZapreminu();\n        std::cout << std::endl;\n        std::cout << \"Povrsina kugle k1: \" << k.DajPovrsinu()\n                  << \"\\nZapremina kugle k1: \" << k.DajZapreminu();\n        std::cout << \"\\nRastojanje centara kugle k i k1: \"\n                  << RastojanjeCentara(k,k1);\n        std::cout << std::endl << std::defaultfloat;\n        k.Ispisi();\n\n    }\n    catch(...) {\n        std::cout << \"IZUZETAK\";\n    }"
                }
            ],
            "compile": [],
            "compile[debug]": [],
            "execute": {
                "expect": [
                    "Povrsina kugle k: 11537.05920\nZapremina kugle k : 116524.29789\nPovrsina kugle k1: 11537.05920\nZapremina kugle k1: 116524.29789\nRastojanje centara kugle k i k1: 145.61212\n{(8,16,32),30.3}\t"
                ]
            },
            "debug": [],
            "profile[memcheck]": [],
            "profile[sgcheck]": []
        }
    ]
}